#CD pipeline for dfa train branch private

name: train-project-private-build-push.yml

on:
  push:
    branches:
       - project-training

    paths:
      - "dfa/src/**"
      - ".github/workflows/train-project-private-build-push.yml"
  workflow_dispatch:

concurrency:
  group: train-build
  cancel-in-progress: false

env:
  UI_IMAGE_NAME: dfa-portal-ui
  API_IMAGE_NAME: dfa-portal-api
  AUTH_IMAGE_NAME: oauth-server
  UI_WORKING_DIRECTORY: ./dfa/src/UI
  API_WORKING_DIRECTORY: ./dfa/src/API
  AUTH_WORKING_DIRECTORY: ./oauth-server/src/API
  TEST_IMAGE_TAG: test
  TRAINING_IMAGE_TAG: training

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Log into registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_PROJECT_REGISTRY }}
          username: ${{ secrets.DOCKER_PROJECT_USERNAME }}
          password: ${{ secrets.DOCKER_PROJECT_PASSWORD_BUILDER }}

      # Get SHORT_SHA to tag images
      - name: Get short SHA
        id: short_sha
        run: |
          echo "::set-output name=SHORT_SHA::$(git rev-parse --short HEAD)"
          echo "Short SHA: $SHORT_SHA"

      - name: Docker Pull from Artifactory
        id: pull
        run: |
          docker pull ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.UI_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}
          docker pull ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.API_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}
          docker pull ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.AUTH_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}
      
      - name: Tag to Prod
        id: retag
        run: |
          docker tag ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.UI_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.UI_IMAGE_NAME}}:${{ env.TRAINING_IMAGE_TAG }}
          docker tag ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.API_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.API_IMAGE_NAME}}:${{ env.TRAINING_IMAGE_TAG }}
          docker tag ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.AUTH_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.AUTH_IMAGE_NAME}}:${{ env.TRAINING_IMAGE_TAG }}

      - name: Docker Push to Artifactory
        id: publish
        run: |
          docker push ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.UI_IMAGE_NAME}}:${{ env.TRAINING_IMAGE_TAG }}
          docker push ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.API_IMAGE_NAME}}:${{ env.TRAINING_IMAGE_TAG }}
          docker push ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.AUTH_IMAGE_NAME}}:${{ env.TRAINING_IMAGE_TAG }}


      - name: Checkout ArgoCD Repo
        id: gitops
        uses: actions/checkout@v4
        with:
          repository: bcgov-c/tenant-gitops-c2ee1a
          ref: training
          token: ${{ secrets.GITOPS_KEY }} # `GH_PAT` is a secret that contains your PAT
          path: gitops

      - name: Update Helm values in gitops
        id: helm
        if: steps.gitops.outcome == 'success'  # Only run if the previous step (publish) was successful
        run: |
          # Clone the GitOps deployment configuration repository
          # Navigate to the directory containing your Helm values file for the environment develop -> DEV, test -> test and 
          cd gitops/charts
          
          # Update the Helm values file with the new image tag and version
          DATETIME=$(date +'%Y-%m-%d %H:%M:%S')  # Get current date and time
          
          sed -i  "s/apitag: .*/apitag: training # Image Updated on $DATETIME/" ../deploy/train_values.yaml
          sed -i  "s/apiversion: .*/apiversion: v-${{ steps.short_sha.outputs.SHORT_SHA }} # Version Updated on $DATETIME/" ../deploy/train_values.yaml

          sed -i  "s/uitag: .*/uitag: training # Image Updated on $DATETIME/" ../deploy/train_values.yaml
          sed -i  "s/uiversion: .*/uiversion: v-${{ steps.short_sha.outputs.SHORT_SHA }} # Version Updated on $DATETIME/" ../deploy/train_values.yaml

          sed -i  "s/authtag: .*/authtag: training # Image Updated on $DATETIME/" ../deploy/train_values.yaml
          sed -i  "s/authversion: .*/authversion: v-${{ steps.short_sha.outputs.SHORT_SHA }} # Version Updated on $DATETIME/" ../deploy/train_values.yaml

          # Commit and push the changes
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          git add ../deploy/train_values.yaml

          # Repackage Helm Chart

          cd dfa-gitops

          helm dependency build

          cd charts

          git add .

          git commit -m "Update Training Private API and UI image tag"
          git push origin training  # Update the branch name as needed